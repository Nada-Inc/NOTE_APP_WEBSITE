name: Create Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up environment
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Check if release already exists
        id: check_release
        run: |
          release_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${RELEASE_VERSION})
          if [ $release_exists -eq 200 ]; then
            echo "::set-output name=release_exists::true"
          else
            echo "::set-output name=release_exists::false"
          fi
      - name: Generate new tag name
        id: generate_tag_name
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            i=1
            while true; do
              NEW_TAG_NAME="${RELEASE_VERSION}-${i}"
              release_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${NEW_TAG_NAME})
              if [ $release_exists -ne 200 ]; then
                break
              fi
              i=$((i+1))
            done
            echo "::set-output name=new_tag_name::${NEW_TAG_NAME}"
          else
            echo "::set-output name=new_tag_name::${RELEASE_VERSION}"
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NOTE_APP_RELEASE_ACTION }}
        with:
          tag_name: ${{ steps.generate_tag_name.outputs.new_tag_name }}
          release_name: Release ${{ steps.generate_tag_name.outputs.new_tag_name }}
          draft: false
          prerelease: false
